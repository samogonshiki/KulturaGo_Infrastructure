version: "3.9"

services:
  postgres:
    image: postgres:${PG_VERSION}
    env_file: .env
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./postgres/create_databases.sql:/docker-entrypoint-initdb.d/01-init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER"]
      interval: 20s
      timeout: 5s
      retries: 5
    networks: [backend]

  redis:
    image: redis:7-alpine
    volumes: [redis-data:/data]
    networks: [backend]

  zookeeper:
    image: confluentinc/cp-zookeeper:${CONFLUENT_VERSION}
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes: [zk-data:/var/lib/zookeeper/data, zk-log:/var/lib/zookeeper/log]
    ports: ["${ZK_PORT}:2181"]
    networks: [backend]

  kafka:
    image: confluentinc/cp-kafka:${CONFLUENT_VERSION}
    user: root
    depends_on: [zookeeper]
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: INTERNAL://0.0.0.0:9092,PLAINTEXT://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:9092,PLAINTEXT://localhost:${KAFKA_LOCALHOST_PORT}
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_LOG4J_ROOT_LOGLEVEL: INFO
    ports:
      - "${KAFKA_PORT}:9092"
      - "${KAFKA_LOCALHOST_PORT}:9093"
    volumes: [kafka-data:/var/lib/kafka/data]
    networks: [backend]

  schema-registry:
    image: confluentinc/cp-schema-registry:${CONFLUENT_VERSION}
    depends_on: [kafka]
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: PLAINTEXT://kafka:9092
    ports: ["${SCHEMA_REGISTRY_PORT}:8081"]
    networks: [backend]

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    depends_on: [kafka]
    environment:
      DYNAMIC_CONFIG_ENABLED: "true"
    ports: ["${KAFKA_UI_PORT}:8080"]
    volumes: [kui-data:/etc/kafka-ui]
    networks: [backend]

  kafka-setup:
    image: confluentinc/cp-kafka:${CONFLUENT_VERSION}
    depends_on: [kafka]
    restart: "no"
    command: >
      bash -c '
        kafka-topics --create --if-not-exists --topic auth-events      --partitions 3 --replication-factor 1 --bootstrap-server kafka:9092;
        kafka-topics --create --if-not-exists --topic content-events   --partitions 3 --replication-factor 1 --bootstrap-server kafka:9092;
        kafka-topics --create --if-not-exists --topic ticket-events    --partitions 3 --replication-factor 1 --bootstrap-server kafka:9092;
        kafka-topics --create --if-not-exists --topic recommendation   --partitions 3 --replication-factor 1 --bootstrap-server kafka:9092;
      '
    networks: [backend]

  minio:
    image: minio/minio:RELEASE.2025-05-20T16-29-03Z
    command: server /data --console-address ":9090"
    env_file: .env
    volumes: [minio-data:/data]
    ports:
      - "9000:9000"    
      - "9090:9090"   
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks: [backend]

  minio-init:
    image: minio/mc
    depends_on: [minio]
    restart: "no"
    entrypoint: /bin/sh -c
    command: |
      "/scripts/minio-init.sh"
    volumes:
      - ./scripts/minio-init.sh:/scripts/minio-init.sh:ro
    env_file: .env
    networks: [backend]

  opensearch:
    image: opensearchproject/opensearch:${OPENSEARCH_VERSION}
    env_file: .env
    environment:
      discovery.type: single-node
      plugins.security.disabled: "true"
    volumes: [opensearch-data:/usr/share/opensearch/data]
    ports: ["9200:9200"]
    networks: [backend]

  neo4j:
    image: neo4j:${NEO4J_VERSION}
    env_file: .env
    environment:
      NEO4J_AUTH: "${NEO4J_USER}/${NEO4J_PASSWORD}"
      NEO4J_dbms_security_auth__enabled: "true"
    volumes: [neo4j-data:/data]
    ports:
      - "7687:7687"
      - "7474:7474"
    networks: [backend]

  nginx:
    image: nginx:alpine
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "${EDGE_PORT}:80"
    networks: [backend]

volumes:
  postgres-data:
  redis-data:
  kafka-data:
  zk-data:
  zk-log:
  kui-data:
  minio-data:
  opensearch-data:
  neo4j-data:

networks:
  backend:
    driver: bridge